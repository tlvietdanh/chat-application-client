/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Swing.DashBoard;

import Controller.Controller;
import com.vdurmont.emoji.EmojiManager;
import com.vdurmont.emoji.EmojiParser;

import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.html.HTML;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;

/**
 *
 * @author black
 */
public class Message extends javax.swing.JPanel implements ListCellRenderer<Message>  {

    String username;
    boolean isHost;
    String message;
    boolean isFile;
    
    boolean isDownload = false;
    Container f = this;

    private HTMLEditorKit htmledit = new HTMLEditorKit();
    private HTMLDocument text_html = (HTMLDocument) htmledit.createDefaultDocument();


    /**
     * Creates new form Message
     */
    public Message(String username, boolean isHost, String message, boolean isFile) {
        initComponents();
        
        this.username = username;
        this.isHost = isHost;
        this.message = message;
        this.isFile = isFile;
       

        if(this != null && this.getParent() != null) {
            this.setSize(this.getParent().getSize().width / 2, this.getParent().getSize().height);
        }
        String result = EmojiParser.parseToUnicode(message);

        if(isHost) {
            this.setBackground(Color.white);
            jLabel1.setText(result);
            jLabel2.setText("");
        }
        else {
            this.setBackground(Color.blue);
            jLabel2.setHorizontalAlignment(JTextField.RIGHT);
            jLabel2.setText(result);
            jLabel1.setText("");
        }
        

        
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setLayout(new java.awt.GridLayout(1, 0));

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("jLabel1");
        jLabel1.setOpaque(true);
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel1MousePressed(evt);
            }
        });
        add(jLabel1);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("jLabel2");
        jLabel2.setOpaque(true);
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel2MousePressed(evt);
            }
        });
        add(jLabel2);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MousePressed
        // TODO add your handling code here:
        System.out.println("hihi1111");
    }//GEN-LAST:event_jLabel1MousePressed

    private void jLabel2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel2MousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables

    public void downloadData(String filename) {
        if(!isDownload) {
            ImportDate importDate = new ImportDate(filename);
            importDate.start();
        }
    }
    
    class ImportDate extends Thread {
        String filename = "";
        ImportDate(String filename) {
            this.filename = filename;
        }


        public void run (){
            try {
                isDownload = true;
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
                fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                fileChooser.setAcceptAllFileFilterUsed(false);
                int result;
                result = fileChooser.showOpenDialog(null);
                if (result == JFileChooser.APPROVE_OPTION) {
                    // user selects a file
                    File selectedFile = fileChooser.getSelectedFile();
                    System.out.println("Selected file: " + selectedFile.getAbsolutePath());
                    Controller.receiveMessage.downloadFile(filename, selectedFile.getAbsolutePath());
                }
                
                isDownload = false;

            }catch (Exception e) {
                isDownload = false;
                e.printStackTrace();
                JOptionPane.showMessageDialog(f.getParent(), "Hệ thống đã xảy ra lỗi, xin vui lỏng thử lại sau!");
            }
        }
    }
    
    @Override
    public Component getListCellRendererComponent(JList<? extends Message> list, final Message value, int index, boolean isSelected, boolean cellHasFocus) {
        
         this.message = value.message;
         this.isFile = value.isFile;
        if(value.isHost) {
            this.setBackground(Color.white);
            jLabel1.setText(value.message);
            jLabel2.setText("");
            jLabel2.setVisible(false);
            jLabel1.setVisible(true);
        }
        else {
            this.setBackground(Color.white);
            jLabel2.setHorizontalAlignment(JTextField.RIGHT);
            jLabel2.setText(value.message);
            jLabel1.setText("");
            jLabel1.setVisible(false);
            jLabel2.setVisible(true);
        }
                
        return this;
    }
}
